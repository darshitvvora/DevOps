server {
  listen 3024;
  server_name localhost;
  root /home/user/repo/microsite.dist/client;

  include frontend_support;
}

server {
  listen 80;
  server_name www.example.com example.com;
  return         301 https://www.example.com$request_uri;
  return         301 https://example.com$request_uri;
}

server {
  listen 443 ssl;
  server_name www.example.com;

  root   /home/repo/public_html/example;
  index  index.html;
  ssl_certificate /etc/nginx/ssl/ssl-bundle.crt;
  ssl_certificate_key /etc/nginx/ssl/star.example.com.key;

  access_log /var/log/nginx/access.log;
  error_log /var/log/nginx/error.log;

  location /blog {
    proxy_redirect off;
    proxy_set_header   X-Real-IP         $remote_addr;
    proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header   X-Forwarded-Proto $scheme;
    proxy_set_header   Host              $http_host;
    proxy_pass https://10.162.16.123:443;

  }

  location /news {
    proxy_redirect off;
    proxy_set_header   X-Real-IP         $remote_addr;
    proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header   X-Forwarded-Proto $scheme;
    proxy_set_header   Host              $http_host;
    proxy_pass https://10.162.51.174:443;

  }
  

  location = /xyz {
  	proxy_pass "https://api.example.com/applications/dashboard/api/bdQuery?id=61";
  }

  location = /sitemap.xml {
	proxy_pass "https://api.example.com/sitemap.xml";
  }

  location /embed/badges {
    alias /home/user/FS/cdn/img/badge;
    try_files $uri $uri/ $uri.html /index.html;
  }

  location /docs/ {
    alias /home/user/FS/cdn/documents;
    try_files $uri $uri/ $uri.xlsx $uri.doc $uri.xls $uri.pdf $uri.csv $uri.odf $uri.docx $uri.ppt $uri.pptx;
  }

  location /maintenance {
    alias /home/user/FS/maintenance;
    try_files $uri $uri/ $uri.html index.html;
  }

  location / {
    try_files $uri $uri/ @prerender;
  }

  location @microsite {
    proxy_pass http://127.0.0.1:3024;
  }

  error_page 404 = @prerender;

  location @prerender {
        #proxy_set_header X-Prerender-Token YOUR_TOKEN;
        
        set $prerender 0;
        if ($http_user_agent ~* "baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest|slackbot|vkShare|W3C_Validator") {
            set $prerender 1;
        }
        if ($args ~ "_escaped_fragment_") {
            set $prerender 1;
        }
        if ($http_user_agent ~ "Prerender") {
            set $prerender 0;
        }
        if ($uri ~* "\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff|svg|eot)") {
            set $prerender 0;
        }
        
        #resolve using Google's DNS server to force DNS resolution and prevent caching of IPs
        resolver 8.8.8.8;
 
        if ($prerender = 1) {
            
            #setting prerender as a variable forces DNS resolution since nginx caches IPs and doesnt play well with load balancing
            set $prerender "service.prerender.io";
            rewrite .* /$scheme://$host$request_uri? break;
            proxy_pass http://$prerender;
        }
        if ($prerender = 0) {
	   proxy_pass http://127.0.0.1:3024;

            #rewrite .* /index.html break;
        }
    } 

}
